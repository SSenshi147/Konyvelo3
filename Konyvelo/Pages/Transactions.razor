@page "/transactions"
@using System.Globalization;
@using Konyvelo.Logic.Dtos

<h3>Transactions</h3>

<DataGrid TItem="GetTransactionDto"
          Data="this._transactions"
          Editable
          EditMode="DataGridEditMode.Inline"
          Sortable
          SortMode="DataGridSortMode.Single"
          ShowPager
          ShowPageSizes
          Resizable
          Responsive
          Bordered
          Hoverable
          Narrow
          Groupable
          ShowGrouping
          ResizeMode="TableResizeMode.Columns"
          UseInternalEditing=false
          RowInserted="this.AddTransaction"
          RowUpdated="this.UpdateTransaction"
          RowRemoved="this.DeleteTransaction"
          NewItemCreator="() => new GetTransactionDto(){Date = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day), AccountId = _accounts.FirstOrDefault()?.Id ?? 0}"
          Filterable=true>
    <DataGridColumns>
        <DataGridDateColumn Field="@nameof(GetTransactionDto.Date)" Caption="Date" Editable>
            <DisplayTemplate>
                @(context.Date.ToString("yyyy.MM.dd"))
            </DisplayTemplate>
        </DataGridDateColumn>
        <DataGridColumn Field="@nameof(GetTransactionDto.Category)" Caption="Category" Editable>
            <DisplayTemplate>
                @context.Category
            </DisplayTemplate>
            <EditTemplate>
                <Autocomplete TItem="string"
                              TValue="string"
                              Data="@(_transactions.GroupBy(x => x.Category).Select(x => x.Key))"
                              FreeTyping=true
                              TextField="@(x => x)"
                              ValueField="@(x => x)"
                              Search="@((string)context.CellValue)"
                              SearchChanged="@(x => context.CellValue = x)">
                </Autocomplete>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(GetTransactionDto.Info)" Caption="Name" Editable>
            <DisplayTemplate>
                @context.Info
            </DisplayTemplate>
            <EditTemplate>
                <Autocomplete TItem="string"
                              TValue="string"
                              Data="@(_transactions.GroupBy(x => x.Info).Select(x => x.Key))"
                              FreeTyping=true
                              TextField="@(x => x)"
                              ValueField="@(x => x)"
                              Search="@((string)context.CellValue)"
                              SearchChanged="@(x => context.CellValue = x)">
                </Autocomplete>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@(nameof(GetTransactionDto.AccountId))" Caption="Account" Editable>
            <DisplayTemplate>
                @context.AccountName
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="GetAccountDto"
                            TValue="int"
                            Data="this._accounts"
                            TextField="@(x => x.Name)"
                            ValueField="@(x => x.Id)"
                            SelectedValue="@((int)context.CellValue)"
                            SelectedValueChanged="@(x => context.CellValue = x)"
                            DefaultItemValue="0"
                            DefaultItemText="Select transaction"
                            DefaultItemDisabled=true>
                </SelectList>
            </EditTemplate>
        </DataGridColumn>
        @* TODO *@
        <DataGridNumericColumn Decimals=2 DecimalSeparator="," Field="@nameof(GetTransactionDto.Total)" Caption="Total" Editable TextAlignment="TextAlignment.End">
            <DisplayTemplate>
                @context.Total.ToString("N", CultureInfo.CreateSpecificCulture("hu-HU")) @context.CurrencyCode
            </DisplayTemplate>
        </DataGridNumericColumn>
        <DataGridCommandColumn PreventRowClick>
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button Color="Color.Warning" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
</DataGrid>

@code {
private List<GetTransactionDto> _transactions = [];
private List<GetAccountDto> _accounts = [];

protected override async Task OnInitializedAsync()
{
await base.OnInitializedAsync();

await LoadAccounts();
await LoadTransactions();
}

private async Task LoadTransactions()
{
_transactions = await _konyveloService.GetAllTransactionsAsync();
_transactions = _transactions.OrderByDescending(x => x.Date).ToList();
}

private async Task LoadAccounts()
{
_accounts = await _konyveloService.GetAllAccountsAsync();
}

private async Task AddTransaction(SavedRowItem<GetTransactionDto, Dictionary<string, object>> savedRowItem)
{
var transaction = savedRowItem.Item;
await _konyveloService.CreateTransactionAsync(new CreateTransactionDto()
{
AccountId = transaction.AccountId,
Category = transaction.Category,
Date = transaction.Date,
Info = transaction.Info,
Total = transaction.Total
});

await LoadTransactions();
}

private async Task UpdateTransaction(SavedRowItem<GetTransactionDto, Dictionary<string, object>> savedRowItem)
{
var transaction = savedRowItem.Item;
var changes = savedRowItem.Values;
foreach (var change in changes)
{
var property = transaction.GetType().GetProperty(change.Key);
property?.SetValue(transaction, change.Value);
}

await _konyveloService.UpdateTransactionAsync(new UpdateTransactionDto()
{
AccountId = transaction.AccountId,
Category = transaction.Category,
Date = transaction.Date,
Info = transaction.Info,
Id = transaction.Id,
Total = transaction.Total
});

await LoadTransactions();
}

private async Task DeleteTransaction(GetTransactionDto transaction)
{
await _konyveloService.DeleteTransactionAsync(transaction.Id);

await LoadTransactions();
}
}