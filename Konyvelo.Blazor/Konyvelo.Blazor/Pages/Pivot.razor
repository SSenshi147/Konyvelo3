@page "/pivot"
@using CsharpGoodies.Extensions;
@using Konyvelo.Logic.Crud.Transactions;
@using Konyvelo.Logic.Crud.Wallets;
@using Konyvelo.Logic.Domain;
@using System.Globalization;

@inject IMediator Mediator

<h3>Pivot</h3>

<DatePicker TValue="@DateTime"
            Date="@this.begin"
            DateChanged="@(async x => {this.begin = x; await this.UpdatePivot();})"></DatePicker>
<DatePicker TValue="@DateTime"
            Date="@this.end"
            DateChanged="@(async x => {this.end = x; await this.UpdatePivot();})"></DatePicker>
<Button @onclick=@(async() => await this.PreviousMonth())>Previous month</Button>
<Button @onclick=@(async() => await this.NextMonth())>Next month</Button>

<table border="1" style="border: 1px solid black;">
    <tr>
        <th>Category</th>
        <th>Sum</th>
    </tr>
    @if (!this.pivotTransactions.IsNullOrEmpty())
    {
        @foreach (var pivot in this.pivotTransactions)
        {
            <tr>
                <td>@pivot.Category</td>
                <td>@pivot.Transactions.GetTotal().ToString("N", CultureInfo.CreateSpecificCulture("hu-HU"))</td>
            </tr>
        }
        <tr>
            <th>TOTAL</th>
            <th>@this.grandTotal.ToString("N", CultureInfo.CreateSpecificCulture("hu-HU"))</th>
        </tr>
    }
</table>


@code {
    private List<PivotTransaction> pivotTransactions = new();
    private DateTime begin = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private DateTime end = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.DaysInMonth(DateTime.Today.Year, DateTime.Today.Month));
    private decimal grandTotal;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await UpdatePivot();
    }

    private async Task UpdatePivot()
    {
        var pivot = await this.Mediator.Send(new GetPivotTransactionsQuery() { BeginDate = this.begin, EndDate = this.end });
        this.pivotTransactions = pivot.PivotTransactions.Where(x => x.Transactions.GetTotal() != 0).OrderBy(x => x.Category).ToList();
        this.grandTotal = this.pivotTransactions.Where(x => x.Transactions.GetTotal() != 0).Sum(x => x.Transactions.GetTotal());
    }

    private async Task PreviousMonth()
    {
        if (begin.Month == 1)
        {
            begin = new(begin.Year - 1, 12, 1);
            end = new(end.Year - 1, 12, DateTime.DaysInMonth(end.Year - 1, 12));
        }
        else
        {
            begin = new(begin.Year, begin.Month - 1, 1);
            end = new(end.Year, end.Month - 1, DateTime.DaysInMonth(end.Year, end.Month - 1));
        }
        await UpdatePivot();
    }

    private async Task NextMonth()
    {
        if (begin.Month == 12)
        {
            begin = new(begin.Year + 1, 1, 1);
            end = new(end.Year + 1, 1, DateTime.DaysInMonth(end.Year + 1, 1));
        }
        else
        {
            begin = new(begin.Year, begin.Month + 1, 1);
            end = new(end.Year, end.Month + 1, DateTime.DaysInMonth(end.Year, end.Month + 1));
        }
        await UpdatePivot();
    }
}
