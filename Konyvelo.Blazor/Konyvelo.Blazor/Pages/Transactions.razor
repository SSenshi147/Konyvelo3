@page "/transactions"
@using Konyvelo.Logic.Crud.Transactions;
@using Konyvelo.Logic.Crud.Wallets;
@using Konyvelo.Logic.Domain;

<h3>Transactions</h3>

<DataGrid TItem="Transaction"
          Data="this._transactions"
          Editable
          EditMode="DataGridEditMode.Inline"
          Sortable
          SortMode="DataGridSortMode.Single"
          ShowPager
          ShowPageSizes
          Resizable
          Responsive
          Bordered
          Hoverable
          Narrow
          Groupable
          ShowGrouping
          ResizeMode="TableResizeMode.Columns"
          UseInternalEditing=false
          RowInserted="this.AddTransaction"
          RowUpdated="this.UpdateTransaction"
          RowRemoved="this.DeleteTransaction"
          NewItemCreator="() => new Transaction(){Date = DateTime.Today, Count = 1, Type = TransactionType.Expense}">
    <DataGridColumns>
        <DataGridDateColumn Field="@nameof(Transaction.Date)" Caption="Date" Editable></DataGridDateColumn>
        <DataGridColumn Field="@nameof(Transaction.Category)" Caption="Category" Editable></DataGridColumn>
        <DataGridColumn Field="@nameof(Transaction.Name)" Caption="Name" Editable></DataGridColumn>
        <DataGridSelectColumn Field="@(nameof(Transaction.Type))" Caption="Type" Editable>
            <DisplayTemplate>
                @context.Type.ToString()
            </DisplayTemplate>
            <EditTemplate>
                <Select TValue="TransactionType"
                        SelectedValue="@((TransactionType)context.CellValue)"
                        SelectedValueChanged="@(x => context.CellValue = x)">
                    <SelectItem Value="TransactionType.Expense">@(TransactionType.Expense.ToString())</SelectItem>
                        <SelectItem Value="TransactionType.Income">@(TransactionType.Income.ToString())</SelectItem>
                    </Select>
                </EditTemplate>
        </DataGridSelectColumn>
        <DataGridNumericColumn Field="@nameof(Transaction.Value)" Caption="Value" Editable></DataGridNumericColumn>
        <DataGridNumericColumn Field="@nameof(Transaction.Count)" Caption="Count" Editable></DataGridNumericColumn>
        <DataGridNumericColumn Field="@nameof(Transaction.TotalValue)" Caption="Total">
            <DisplayTemplate>
                @context.TotalValue
            </DisplayTemplate>
        </DataGridNumericColumn>
        <DataGridColumn Field="@(nameof(Transaction.WalletId))" Caption="Wallet" Editable>
            <DisplayTemplate>
                @context.Wallet.Name
            </DisplayTemplate>
            <EditTemplate>
                <SelectList TItem="Wallet"
                        TValue="Guid"
                        Data="this._wallets"
                        TextField="@(x => x.Name)"
                        ValueField="@(x => x.Id)"
                        SelectedValue="@((Guid)context.CellValue)"
                        SelectedValueChanged="@(x => context.CellValue = x)"
                        DefaultItemValue="Guid.Empty"
                        DefaultItemText="Select wallet"
                        DefaultItemDisabled=true>
                </SelectList>
            </EditTemplate>
        </DataGridColumn>
        <DataGridCommandColumn PreventRowClick>
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button Color="Color.Warning" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
    </DataGridColumns>
</DataGrid>

    @code {
    private List<Transaction> _transactions = new();
    private List<Wallet> _wallets = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadWallets();
        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        _transactions = await this._mediator.Send(new GetAllTransactionsQuery());
    }

    private async Task LoadWallets()
    {
        _wallets = await _mediator.Send(new GetAllWalletsQuery());
    }

    private async Task AddTransaction(SavedRowItem<Transaction, Dictionary<string, object>> savedRowItem)
    {
        var transaction = savedRowItem.Item;
        await _mediator.Send(new CreateTransactionCommand()
            {
                Source = transaction
            });

        await LoadTransactions();
    }

    private async Task UpdateTransaction(SavedRowItem<Transaction, Dictionary<string, object>> savedRowItem)
    {
        var transaction = savedRowItem.Item;
        var changes = savedRowItem.Values;
        foreach (var change in changes)
        {
            var property = transaction.GetType().GetProperty(change.Key);
            property?.SetValue(transaction, change.Value);
        }
        await _mediator.Send(new UpdateTransactionCommand()
            {
                Source = transaction
            });
        await LoadTransactions();
    }

    private async Task DeleteTransaction(Transaction transaction)
    {
        await _mediator.Send(new DeleteTransactionCommand() { Id = transaction.Id });
        await LoadTransactions();
    }
}
